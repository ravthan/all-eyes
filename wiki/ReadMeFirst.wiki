= Motivation behind this project =
Perfect security is a myth.  Most unbreakable security of today, ages to vulnerability over time.  Hence taking quick action after a security breach is critical.  Having a security layer along defensive lines, i.e. doing passive/active monitoring of critical components and taking actions based on configurable thresholds provides such a mitigation, against a possible security breach.
"AllEyes" is such a framework with a potpourri of tools (monitors) useful for defenders, attackers and security professionals.

The plan is to ensure the scalability of AllEyes from small embedded systems to large scale servers. 

For the NYU-POLY Application Security class project, we prototyped the concept on Ubuntu.

= Introduction =
“All Eyes” (AKA ae) is a miniature applications-security intrusion detection system.  It has four components.  They are:

   # 'ae' daemon that spawns and maintains monitors.  This component is implemented in C.  This component executes from the host, outside of chroot-jail.  Then it drops the privileges and spawns monitors to run within the chroot-jail.
   #  Monitors are independent processes spawned by the ae daemon. Each monitor watches a class of a system resources such as Sockets, running-processes, critical files etc. Monitors may be implemented in C or in other languages such as PERL, PYTHON, Java etc.
   #  'ae proxy' acts as a DMZ between the Android ae-Manager and the ae daemon.  Proxy requires an authenticated connection.
   #  'ae-mgr' is an Android application which helps users to choose various actions for ae daemon to take, based on the status of the monitors. It communicates over the Internet to ae daemon through a secure connection.  This component is implemented in Java.


= High Level Architecture =

Following is an overview diagram of the AE architecture:
http://all-eyes.googlecode.com/svn/trunk/docs/AEArchOverView.png


==1) Linux System (ae daemon):==

   'ae' daemons runs on Ubuntu 12.04 (Precise Pangolin) release.

    On one side, the daemon communicates with monitor(s) over socketpair(s); on the other side, daemon reports the status to a single SSL-client.

     For each monitor 'ae' daemon sets up the stdin/sedout out of a socketpair.

    'ae' daemon entertains only one SSL-client at any given time.

    monitors are sent SIGKILL signal (KILL -9) if ae-daemon encounters issue with that monitor.

    This design assumes monitors are not hostile to each other and ae-daemon.  In otherwords, 'ae' daemon and the monitors are considered to be in the same security domain.
  
   The current prototyped monitors are:
     * self monitor - Currently ensures the 'ae' daemon alive through the heart beat message. 
     * socket monitor
     * process monitor
     * file descriptor monitor
     * critical file monitor


     The procedure for creating a monitoring is defined here:
     http://code.google.com/p/all-eyes/wiki/MonitorProcedure

    Protocol between daemon & monitors is described here:

      https://code.google.com/p/all-eyes/wiki/AeMonitorProtocol

    The monitors spawned by ae-daemon will run in chroot-jail. The installation package sets up chroot-jail for the user.  

==2) Web Server(AE Proxy):==

    AE Proxy uses SSL for communicating with ae daemon.  One has to create SSL keys for this purpose.  The details of creating keys are at:

     http://code.google.com/p/all-eyes/wiki/KeyManagementTool


==3) Android Device(AE Manager):==

   The Android Device receives monitors status from AE Proxy.  It also gives the users the option of taking action(s) or not.



=Implementation/Testing=

==1) Development Environments:==

We use Google-code setup for our development, integration and testing.  The link for the project is at https://code.google.com/p/all-eyes/source/browse/

  a) AE:

     One needs to setup Ubuntu 12.04 (Precise Pangolin) with Java and C development environment.  For Eclipse installation details look at http://code.google.com/p/all-eyes/wiki/EclipseC_SVNSetup

         

     Users may use CLI/command line access for their developers
     environment, or use eclipse as described:

      https://code.google.com/p/all-eyes/wiki/EclipseC_SVNSetup

     Requires installation of SSL as described at 
http://code.google.com/p/all-eyes/wiki/UbuntuSSLsetup


   b) AE Proxy:

*///TBRT_QUESTION... Need more details here///*   

   c) AE Manager:

     Additional information can be found here:
     http://code.google.com/p/all-eyes/wiki/AndroidDevelopmentEnvironmentSetup

*///TBRT_QUESTION... Need more details here///*

==2) Testing==
  a) We have been doing incremental testing through out the development cycle (running ae daemon regression test after every couple of builds helps us iron out bugs before going on to far.)

  The details of issues/bugs found are documented in [http://code.google.com/p/all-eyes/issues/list].  We are continuously resolving the bugs and adding code towards enhancements.


==3) Coding Styles==

*///TBRT_NOTE:  Link or description of our coding styles...////*

  # Function type & name on same line:
     int functionA(int A, int B)
  #  All defined variables will be assigned a default value:
     int i = 1, j = -1;
  #  Indentation, users are encouraged to indent their code for easy reading:
{{{
int functionA(void)
{
   int ret=0;
       
   printf("Hello\n");
   return(0);
}
}}}
  # Comments:
   * Before every function.
   * Located at right hand side of statements.
   * In general, when in doubt, comment.
  # Security:  Add SECURITY comment when have a security concern.


*///TBRT_QUESTION:  Is this where we will describe compile/link options used for a) security of executables  and b) code checking...

==4) Security==

     #Where we have Security concerns, we have added "Security" keyword in the code.

==5) Future Enhancements==


  # Make PERSISTENT/VOLATILE per Monitor based, not ae wide.
  # Make 'ae' statically linked for embedded environment.
  # Add Mutex to protect the monitor struct.
  # Make sure restarting of the Monitors work properly.
  # Add support for all signals.
  # Give each message from Monitor an ID (per monitor basis)
  # Give monitor the ability to define what action should be taken based on the abnormality
  # Do security analysis of whether different protocol is necessary between the aedaemon-and-AeManager( SSL client) and aedaemon-and-Monitors




==6) Known Issues==

   #  When Monitor dies, it sends signal to parent (ae-daemon), ae-daemon is supposed to act on the signal, but it does not seem to be working in Ubuntu (it is staying in defunct state).

   #  When monitor dies, it cannot be restarted.


==7) Installation==

*/// TBD. Two installation options ///*
    
   #   Three tar files, plus Short Installation Doc.
   #  Install Package.

A.  ae-daemon, which dir(s) installed to?

B.  proxy, which dir(s) installed to?
      Running under same VM as ae-daemon (for prototype), outside of chroot directory.

C.  droid app, which dir(s) installed to?
      Running under same VM (for prototype)