Welcome to "All Eyes" AKA 'ae'.


Installation Instructions
=========================
1.  ae
2.  proxy
3.  Android Client


How to setup development Environment
====================================
- Need Linux development environment; Makefile is provided.
    Just type "make" in src/ae directory.
- One can also use Eclipse; will be easier to develop
    as we are sync'ing with google-code SVN.
- Make sure syslog service is running to see the
    logs in /var/log/messages.
   


Overall ae design
=================
    'ae' is a dynamically linked for security.
    Each Monitor is a plugin at compile time.
    Monitors are spawned as threads with two parameters i.e. to act in
      monitor mode/minitor-and-action mode and the lifespan is
      persistent/volatile across reboots.  How a monitor keeps its
      information in persistent is upto the monitor.
    But, actions are predefined in the framework.  Monitors can't take
    actions.  They can only update the status level.


    Future Enhancements:
        - Instead of spawning threads, run each monitor in its own 
          address space i.e. use fork, instead of spawning threads.
          NOTE:  If you do, you will have to develop IPC mechanism
            to talk to the monitors.
        - Make PERSISTENT/VOLATILE per Monitor based, not ae wide.
        - Make 'ae' statically linked for embedded environment.


How to add Monitor-Plugins to ae
================================
- Add the MONCOMM structure values in ae.c to monarray structure array.
- Add a .c file by our monitor name (EX: selfmon.c) with appropriate
  functions.
- Add your monitor function with the apprpriate prototype in ae.h


How to add Actions to ae
========================
